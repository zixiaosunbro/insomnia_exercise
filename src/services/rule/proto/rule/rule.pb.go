// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: proto/rule.proto

package rule

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProjectRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganId      int32  `protobuf:"varint,1,opt,name=organ_id,json=organId,proto3" json:"organ_id,omitempty"`
	ProjectId    int32  `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Rule         string `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
	RuleCategory int32  `protobuf:"varint,4,opt,name=rule_category,json=ruleCategory,proto3" json:"rule_category,omitempty"`
	ProjectName  string `protobuf:"bytes,5,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
}

func (x *ProjectRule) Reset() {
	*x = ProjectRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectRule) ProtoMessage() {}

func (x *ProjectRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectRule.ProtoReflect.Descriptor instead.
func (*ProjectRule) Descriptor() ([]byte, []int) {
	return file_proto_rule_proto_rawDescGZIP(), []int{0}
}

func (x *ProjectRule) GetOrganId() int32 {
	if x != nil {
		return x.OrganId
	}
	return 0
}

func (x *ProjectRule) GetProjectId() int32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ProjectRule) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *ProjectRule) GetRuleCategory() int32 {
	if x != nil {
		return x.RuleCategory
	}
	return 0
}

func (x *ProjectRule) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_proto_rule_proto_rawDescGZIP(), []int{1}
}

func (x *PingRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_proto_rule_proto_rawDescGZIP(), []int{2}
}

func (x *PingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AddProjectRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrganizationId int32  `protobuf:"varint,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId      int32  `protobuf:"varint,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Rule           string `protobuf:"bytes,4,opt,name=rule,proto3" json:"rule,omitempty"`
	RuleCategory   int32  `protobuf:"varint,5,opt,name=rule_category,json=ruleCategory,proto3" json:"rule_category,omitempty"`
}

func (x *AddProjectRuleRequest) Reset() {
	*x = AddProjectRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProjectRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProjectRuleRequest) ProtoMessage() {}

func (x *AddProjectRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProjectRuleRequest.ProtoReflect.Descriptor instead.
func (*AddProjectRuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_rule_proto_rawDescGZIP(), []int{3}
}

func (x *AddProjectRuleRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddProjectRuleRequest) GetOrganizationId() int32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *AddProjectRuleRequest) GetProjectId() int32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AddProjectRuleRequest) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *AddProjectRuleRequest) GetRuleCategory() int32 {
	if x != nil {
		return x.RuleCategory
	}
	return 0
}

type AddProjectRuleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddProjectRuleReply) Reset() {
	*x = AddProjectRuleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProjectRuleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProjectRuleReply) ProtoMessage() {}

func (x *AddProjectRuleReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProjectRuleReply.ProtoReflect.Descriptor instead.
func (*AddProjectRuleReply) Descriptor() ([]byte, []int) {
	return file_proto_rule_proto_rawDescGZIP(), []int{4}
}

type UpdateProjectRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrganizationId int32  `protobuf:"varint,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ProjectId      int32  `protobuf:"varint,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Rule           string `protobuf:"bytes,4,opt,name=rule,proto3" json:"rule,omitempty"`
	RuleCategory   int32  `protobuf:"varint,5,opt,name=rule_category,json=ruleCategory,proto3" json:"rule_category,omitempty"`
}

func (x *UpdateProjectRuleRequest) Reset() {
	*x = UpdateProjectRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRuleRequest) ProtoMessage() {}

func (x *UpdateProjectRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_rule_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateProjectRuleRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateProjectRuleRequest) GetOrganizationId() int32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *UpdateProjectRuleRequest) GetProjectId() int32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateProjectRuleRequest) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *UpdateProjectRuleRequest) GetRuleCategory() int32 {
	if x != nil {
		return x.RuleCategory
	}
	return 0
}

type UpdateProjectRuleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateProjectRuleReply) Reset() {
	*x = UpdateProjectRuleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRuleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRuleReply) ProtoMessage() {}

func (x *UpdateProjectRuleReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRuleReply.ProtoReflect.Descriptor instead.
func (*UpdateProjectRuleReply) Descriptor() ([]byte, []int) {
	return file_proto_rule_proto_rawDescGZIP(), []int{6}
}

type GetProjectRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrganizationId int32  `protobuf:"varint,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *GetProjectRuleRequest) Reset() {
	*x = GetProjectRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRuleRequest) ProtoMessage() {}

func (x *GetProjectRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRuleRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_rule_proto_rawDescGZIP(), []int{7}
}

func (x *GetProjectRuleRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetProjectRuleRequest) GetOrganizationId() int32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

type GetProjectRuleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectRules []*ProjectRule `protobuf:"bytes,1,rep,name=project_rules,json=projectRules,proto3" json:"project_rules,omitempty"`
}

func (x *GetProjectRuleReply) Reset() {
	*x = GetProjectRuleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_rule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRuleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRuleReply) ProtoMessage() {}

func (x *GetProjectRuleReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_rule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRuleReply.ProtoReflect.Descriptor instead.
func (*GetProjectRuleReply) Descriptor() ([]byte, []int) {
	return file_proto_rule_proto_rawDescGZIP(), []int{8}
}

func (x *GetProjectRuleReply) GetProjectRules() []*ProjectRule {
	if x != nil {
		return x.ProjectRules
	}
	return nil
}

var File_proto_rule_proto protoreflect.FileDescriptor

var file_proto_rule_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x69, 0x6e, 0x73, 0x6f, 0x6d, 0x6e, 0x69, 0x61, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x28, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x15,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x72, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x18, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x56, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x69, 0x6e, 0x73, 0x6f, 0x6d, 0x6e, 0x69, 0x61, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x32, 0xf3, 0x02, 0x0a, 0x0b, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x50, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x73, 0x6f, 0x6d, 0x6e, 0x69, 0x61, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x69, 0x6e, 0x73, 0x6f, 0x6d, 0x6e, 0x69, 0x61, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x24,
	0x2e, 0x69, 0x6e, 0x73, 0x6f, 0x6d, 0x6e, 0x69, 0x61, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x73, 0x6f, 0x6d, 0x6e, 0x69, 0x61, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x27, 0x2e, 0x69, 0x6e, 0x73, 0x6f, 0x6d, 0x6e, 0x69, 0x61, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x73, 0x6f, 0x6d,
	0x6e, 0x69, 0x61, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x73, 0x6f, 0x6d, 0x6e, 0x69, 0x61, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x73, 0x6f,
	0x6d, 0x6e, 0x69, 0x61, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42,
	0x0c, 0x5a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_rule_proto_rawDescOnce sync.Once
	file_proto_rule_proto_rawDescData = file_proto_rule_proto_rawDesc
)

func file_proto_rule_proto_rawDescGZIP() []byte {
	file_proto_rule_proto_rawDescOnce.Do(func() {
		file_proto_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_rule_proto_rawDescData)
	})
	return file_proto_rule_proto_rawDescData
}

var file_proto_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_rule_proto_goTypes = []interface{}{
	(*ProjectRule)(nil),              // 0: insomnia.rule.ProjectRule
	(*PingRequest)(nil),              // 1: insomnia.rule.PingRequest
	(*PingResponse)(nil),             // 2: insomnia.rule.PingResponse
	(*AddProjectRuleRequest)(nil),    // 3: insomnia.rule.AddProjectRuleRequest
	(*AddProjectRuleReply)(nil),      // 4: insomnia.rule.AddProjectRuleReply
	(*UpdateProjectRuleRequest)(nil), // 5: insomnia.rule.UpdateProjectRuleRequest
	(*UpdateProjectRuleReply)(nil),   // 6: insomnia.rule.UpdateProjectRuleReply
	(*GetProjectRuleRequest)(nil),    // 7: insomnia.rule.GetProjectRuleRequest
	(*GetProjectRuleReply)(nil),      // 8: insomnia.rule.GetProjectRuleReply
}
var file_proto_rule_proto_depIdxs = []int32{
	0, // 0: insomnia.rule.GetProjectRuleReply.project_rules:type_name -> insomnia.rule.ProjectRule
	1, // 1: insomnia.rule.RuleService.Ping:input_type -> insomnia.rule.PingRequest
	3, // 2: insomnia.rule.RuleService.AddProjectRule:input_type -> insomnia.rule.AddProjectRuleRequest
	5, // 3: insomnia.rule.RuleService.UpdateProjectRule:input_type -> insomnia.rule.UpdateProjectRuleRequest
	7, // 4: insomnia.rule.RuleService.GetProjectRule:input_type -> insomnia.rule.GetProjectRuleRequest
	2, // 5: insomnia.rule.RuleService.Ping:output_type -> insomnia.rule.PingResponse
	4, // 6: insomnia.rule.RuleService.AddProjectRule:output_type -> insomnia.rule.AddProjectRuleReply
	6, // 7: insomnia.rule.RuleService.UpdateProjectRule:output_type -> insomnia.rule.UpdateProjectRuleReply
	8, // 8: insomnia.rule.RuleService.GetProjectRule:output_type -> insomnia.rule.GetProjectRuleReply
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_rule_proto_init() }
func file_proto_rule_proto_init() {
	if File_proto_rule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProjectRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProjectRuleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRuleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_rule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRuleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_rule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_rule_proto_goTypes,
		DependencyIndexes: file_proto_rule_proto_depIdxs,
		MessageInfos:      file_proto_rule_proto_msgTypes,
	}.Build()
	File_proto_rule_proto = out.File
	file_proto_rule_proto_rawDesc = nil
	file_proto_rule_proto_goTypes = nil
	file_proto_rule_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RuleServiceClient is the client API for RuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuleServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	AddProjectRule(ctx context.Context, in *AddProjectRuleRequest, opts ...grpc.CallOption) (*AddProjectRuleReply, error)
	UpdateProjectRule(ctx context.Context, in *UpdateProjectRuleRequest, opts ...grpc.CallOption) (*UpdateProjectRuleReply, error)
	GetProjectRule(ctx context.Context, in *GetProjectRuleRequest, opts ...grpc.CallOption) (*GetProjectRuleReply, error)
}

type ruleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleServiceClient(cc grpc.ClientConnInterface) RuleServiceClient {
	return &ruleServiceClient{cc}
}

func (c *ruleServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/insomnia.rule.RuleService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) AddProjectRule(ctx context.Context, in *AddProjectRuleRequest, opts ...grpc.CallOption) (*AddProjectRuleReply, error) {
	out := new(AddProjectRuleReply)
	err := c.cc.Invoke(ctx, "/insomnia.rule.RuleService/AddProjectRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) UpdateProjectRule(ctx context.Context, in *UpdateProjectRuleRequest, opts ...grpc.CallOption) (*UpdateProjectRuleReply, error) {
	out := new(UpdateProjectRuleReply)
	err := c.cc.Invoke(ctx, "/insomnia.rule.RuleService/UpdateProjectRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) GetProjectRule(ctx context.Context, in *GetProjectRuleRequest, opts ...grpc.CallOption) (*GetProjectRuleReply, error) {
	out := new(GetProjectRuleReply)
	err := c.cc.Invoke(ctx, "/insomnia.rule.RuleService/GetProjectRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleServiceServer is the server API for RuleService service.
type RuleServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	AddProjectRule(context.Context, *AddProjectRuleRequest) (*AddProjectRuleReply, error)
	UpdateProjectRule(context.Context, *UpdateProjectRuleRequest) (*UpdateProjectRuleReply, error)
	GetProjectRule(context.Context, *GetProjectRuleRequest) (*GetProjectRuleReply, error)
}

// UnimplementedRuleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRuleServiceServer struct {
}

func (*UnimplementedRuleServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedRuleServiceServer) AddProjectRule(context.Context, *AddProjectRuleRequest) (*AddProjectRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectRule not implemented")
}
func (*UnimplementedRuleServiceServer) UpdateProjectRule(context.Context, *UpdateProjectRuleRequest) (*UpdateProjectRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectRule not implemented")
}
func (*UnimplementedRuleServiceServer) GetProjectRule(context.Context, *GetProjectRuleRequest) (*GetProjectRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectRule not implemented")
}

func RegisterRuleServiceServer(s *grpc.Server, srv RuleServiceServer) {
	s.RegisterService(&_RuleService_serviceDesc, srv)
}

func _RuleService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/insomnia.rule.RuleService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_AddProjectRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).AddProjectRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/insomnia.rule.RuleService/AddProjectRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).AddProjectRule(ctx, req.(*AddProjectRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_UpdateProjectRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).UpdateProjectRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/insomnia.rule.RuleService/UpdateProjectRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).UpdateProjectRule(ctx, req.(*UpdateProjectRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_GetProjectRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).GetProjectRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/insomnia.rule.RuleService/GetProjectRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).GetProjectRule(ctx, req.(*GetProjectRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RuleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "insomnia.rule.RuleService",
	HandlerType: (*RuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _RuleService_Ping_Handler,
		},
		{
			MethodName: "AddProjectRule",
			Handler:    _RuleService_AddProjectRule_Handler,
		},
		{
			MethodName: "UpdateProjectRule",
			Handler:    _RuleService_UpdateProjectRule_Handler,
		},
		{
			MethodName: "GetProjectRule",
			Handler:    _RuleService_GetProjectRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rule.proto",
}
